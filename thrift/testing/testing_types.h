/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef testing_TYPES_H
#define testing_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class IntMessage;

class DoubleMessage;

class StringMessage;

class ShortMessage;

class LargeMessage;

class Lists;

typedef struct _IntMessage__isset {
  _IntMessage__isset() : num(true) {}
  bool num :1;
} _IntMessage__isset;

class IntMessage : public virtual ::apache::thrift::TBase {
 public:

  IntMessage(const IntMessage&) noexcept;
  IntMessage& operator=(const IntMessage&) noexcept;
  IntMessage() noexcept
             : num(1717) {
  }

  virtual ~IntMessage() noexcept;
  int32_t num;

  _IntMessage__isset __isset;

  void __set_num(const int32_t val);

  bool operator == (const IntMessage & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const IntMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IntMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(IntMessage &a, IntMessage &b);

std::ostream& operator<<(std::ostream& out, const IntMessage& obj);

typedef struct _DoubleMessage__isset {
  _DoubleMessage__isset() : num(true) {}
  bool num :1;
} _DoubleMessage__isset;

class DoubleMessage : public virtual ::apache::thrift::TBase {
 public:

  DoubleMessage(const DoubleMessage&) noexcept;
  DoubleMessage& operator=(const DoubleMessage&) noexcept;
  DoubleMessage() noexcept
                : num(10.9191000000000003) {
  }

  virtual ~DoubleMessage() noexcept;
  double num;

  _DoubleMessage__isset __isset;

  void __set_num(const double val);

  bool operator == (const DoubleMessage & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const DoubleMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DoubleMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DoubleMessage &a, DoubleMessage &b);

std::ostream& operator<<(std::ostream& out, const DoubleMessage& obj);

typedef struct _StringMessage__isset {
  _StringMessage__isset() : str(false) {}
  bool str :1;
} _StringMessage__isset;

class StringMessage : public virtual ::apache::thrift::TBase {
 public:

  StringMessage(const StringMessage&);
  StringMessage& operator=(const StringMessage&);
  StringMessage() noexcept
                : str() {
  }

  virtual ~StringMessage() noexcept;
  std::string str;

  _StringMessage__isset __isset;

  void __set_str(const std::string& val);

  bool operator == (const StringMessage & rhs) const
  {
    if (!(str == rhs.str))
      return false;
    return true;
  }
  bool operator != (const StringMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StringMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(StringMessage &a, StringMessage &b);

std::ostream& operator<<(std::ostream& out, const StringMessage& obj);

typedef struct _ShortMessage__isset {
  _ShortMessage__isset() : num1(true), num2(true), str(false) {}
  bool num1 :1;
  bool num2 :1;
  bool str :1;
} _ShortMessage__isset;

class ShortMessage : public virtual ::apache::thrift::TBase {
 public:

  ShortMessage(const ShortMessage&);
  ShortMessage& operator=(const ShortMessage&);
  ShortMessage() noexcept
               : num1(0),
                 num2(static_cast<double>(0)),
                 str() {
  }

  virtual ~ShortMessage() noexcept;
  int32_t num1;
  double num2;
  std::string str;

  _ShortMessage__isset __isset;

  void __set_num1(const int32_t val);

  void __set_num2(const double val);

  void __set_str(const std::string& val);

  bool operator == (const ShortMessage & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    if (!(str == rhs.str))
      return false;
    return true;
  }
  bool operator != (const ShortMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShortMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShortMessage &a, ShortMessage &b);

std::ostream& operator<<(std::ostream& out, const ShortMessage& obj);

typedef struct _LargeMessage__isset {
  _LargeMessage__isset() : string1(false), size(false), ints(false), doubles(false), bools(false) {}
  bool string1 :1;
  bool size :1;
  bool ints :1;
  bool doubles :1;
  bool bools :1;
} _LargeMessage__isset;

class LargeMessage : public virtual ::apache::thrift::TBase {
 public:

  LargeMessage(const LargeMessage&);
  LargeMessage& operator=(const LargeMessage&);
  LargeMessage() noexcept
               : string1(),
                 size(0) {
  }

  virtual ~LargeMessage() noexcept;
  std::string string1;
  int32_t size;
  std::vector<int32_t>  ints;
  std::vector<double>  doubles;
  std::vector<bool>  bools;

  _LargeMessage__isset __isset;

  void __set_string1(const std::string& val);

  void __set_size(const int32_t val);

  void __set_ints(const std::vector<int32_t> & val);

  void __set_doubles(const std::vector<double> & val);

  void __set_bools(const std::vector<bool> & val);

  bool operator == (const LargeMessage & rhs) const
  {
    if (!(string1 == rhs.string1))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(ints == rhs.ints))
      return false;
    if (!(doubles == rhs.doubles))
      return false;
    if (!(bools == rhs.bools))
      return false;
    return true;
  }
  bool operator != (const LargeMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LargeMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(LargeMessage &a, LargeMessage &b);

std::ostream& operator<<(std::ostream& out, const LargeMessage& obj);

typedef struct _Lists__isset {
  _Lists__isset() : numbers(true) {}
  bool numbers :1;
} _Lists__isset;

class Lists : public virtual ::apache::thrift::TBase {
 public:

  Lists(const Lists&);
  Lists& operator=(const Lists&);
  Lists() noexcept {

  }

  virtual ~Lists() noexcept;
  std::vector<LargeMessage>  numbers;

  _Lists__isset __isset;

  void __set_numbers(const std::vector<LargeMessage> & val);

  bool operator == (const Lists & rhs) const
  {
    if (!(numbers == rhs.numbers))
      return false;
    return true;
  }
  bool operator != (const Lists &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Lists & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Lists &a, Lists &b);

std::ostream& operator<<(std::ostream& out, const Lists& obj);



#endif
