// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ThriftMessage.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class ThriftMessageHandler : virtual public ThriftMessageIf {
public:
    ThriftMessageHandler() = default;



    int32_t sendInt(const IntMessage& intMsg) {
        // Your implementation goes here
        return intMsg.num;
    }

    void sendStr(std::string& _return, const StringMessage& strMsg) {
        // Your implementation goes here
        _return = strMsg.str;
    }

    double sendDouble(const DoubleMessage& doubleMsg) {
        // Your implementation goes here
        return 1919.0101;
    }

    void sendShortMsg(ShortMessage& _return, const ShortMessage& srtMsg) {
        // Your implementation goes here
        _return = srtMsg;
    }

    void sendLargeMsg(LargeMessage& _return, const LargeMessage& lrgMsg) {
        // Your implementation goes here
        _return = lrgMsg;
    }

    void ping() {
        // Your implementation goes here
        return;
    }

};

int main(int argc, char **argv) {
    int port = 9090;
    ::std::shared_ptr<ThriftMessageHandler> handler(new ThriftMessageHandler());
    ::std::shared_ptr<TProcessor> processor(new ThriftMessageProcessor(handler));
    ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    printf("server started\n");
    server.serve();
    return 0;
}

