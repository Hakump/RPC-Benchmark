/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "testing_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




IntMessage::~IntMessage() noexcept {
}


void IntMessage::__set_num(const int32_t val) {
  this->num = val;
}
std::ostream& operator<<(std::ostream& out, const IntMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IntMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num);
          this->__isset.num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IntMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IntMessage");

  xfer += oprot->writeFieldBegin("num", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IntMessage &a, IntMessage &b) {
  using ::std::swap;
  swap(a.num, b.num);
  swap(a.__isset, b.__isset);
}

IntMessage::IntMessage(const IntMessage& other0) noexcept {
  num = other0.num;
  __isset = other0.__isset;
}
IntMessage& IntMessage::operator=(const IntMessage& other1) noexcept {
  num = other1.num;
  __isset = other1.__isset;
  return *this;
}
void IntMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IntMessage(";
  out << "num=" << to_string(num);
  out << ")";
}


DoubleMessage::~DoubleMessage() noexcept {
}


void DoubleMessage::__set_num(const double val) {
  this->num = val;
}
std::ostream& operator<<(std::ostream& out, const DoubleMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DoubleMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->num);
          this->__isset.num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DoubleMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DoubleMessage");

  xfer += oprot->writeFieldBegin("num", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DoubleMessage &a, DoubleMessage &b) {
  using ::std::swap;
  swap(a.num, b.num);
  swap(a.__isset, b.__isset);
}

DoubleMessage::DoubleMessage(const DoubleMessage& other2) noexcept {
  num = other2.num;
  __isset = other2.__isset;
}
DoubleMessage& DoubleMessage::operator=(const DoubleMessage& other3) noexcept {
  num = other3.num;
  __isset = other3.__isset;
  return *this;
}
void DoubleMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DoubleMessage(";
  out << "num=" << to_string(num);
  out << ")";
}


StringMessage::~StringMessage() noexcept {
}


void StringMessage::__set_str(const std::string& val) {
  this->str = val;
}
std::ostream& operator<<(std::ostream& out, const StringMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StringMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str);
          this->__isset.str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StringMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StringMessage");

  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->str);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StringMessage &a, StringMessage &b) {
  using ::std::swap;
  swap(a.str, b.str);
  swap(a.__isset, b.__isset);
}

StringMessage::StringMessage(const StringMessage& other4) {
  str = other4.str;
  __isset = other4.__isset;
}
StringMessage& StringMessage::operator=(const StringMessage& other5) {
  str = other5.str;
  __isset = other5.__isset;
  return *this;
}
void StringMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StringMessage(";
  out << "str=" << to_string(str);
  out << ")";
}


ShortMessage::~ShortMessage() noexcept {
}


void ShortMessage::__set_num1(const int32_t val) {
  this->num1 = val;
}

void ShortMessage::__set_num2(const double val) {
  this->num2 = val;
}

void ShortMessage::__set_str(const std::string& val) {
  this->str = val;
}
std::ostream& operator<<(std::ostream& out, const ShortMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num1);
          this->__isset.num1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->num2);
          this->__isset.num2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str);
          this->__isset.str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortMessage");

  xfer += oprot->writeFieldBegin("num1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->num1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num2", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->num2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->str);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortMessage &a, ShortMessage &b) {
  using ::std::swap;
  swap(a.num1, b.num1);
  swap(a.num2, b.num2);
  swap(a.str, b.str);
  swap(a.__isset, b.__isset);
}

ShortMessage::ShortMessage(const ShortMessage& other6) {
  num1 = other6.num1;
  num2 = other6.num2;
  str = other6.str;
  __isset = other6.__isset;
}
ShortMessage& ShortMessage::operator=(const ShortMessage& other7) {
  num1 = other7.num1;
  num2 = other7.num2;
  str = other7.str;
  __isset = other7.__isset;
  return *this;
}
void ShortMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortMessage(";
  out << "num1=" << to_string(num1);
  out << ", " << "num2=" << to_string(num2);
  out << ", " << "str=" << to_string(str);
  out << ")";
}


LargeMessage::~LargeMessage() noexcept {
}


void LargeMessage::__set_string1(const std::string& val) {
  this->string1 = val;
}

void LargeMessage::__set_size(const int32_t val) {
  this->size = val;
}

void LargeMessage::__set_ints(const std::vector<int32_t> & val) {
  this->ints = val;
}

void LargeMessage::__set_doubles(const std::vector<double> & val) {
  this->doubles = val;
}

void LargeMessage::__set_bools(const std::vector<bool> & val) {
  this->bools = val;
}
std::ostream& operator<<(std::ostream& out, const LargeMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LargeMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->string1);
          this->__isset.string1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ints.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->ints.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += iprot->readI32(this->ints[_i12]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->doubles.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->doubles.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += iprot->readDouble(this->doubles[_i17]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.doubles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bools.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->bools.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readBool(this->bools[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.bools = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LargeMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LargeMessage");

  xfer += oprot->writeFieldBegin("string1", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->string1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ints", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->ints.size()));
    std::vector<int32_t> ::const_iterator _iter23;
    for (_iter23 = this->ints.begin(); _iter23 != this->ints.end(); ++_iter23)
    {
      xfer += oprot->writeI32((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("doubles", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->doubles.size()));
    std::vector<double> ::const_iterator _iter24;
    for (_iter24 = this->doubles.begin(); _iter24 != this->doubles.end(); ++_iter24)
    {
      xfer += oprot->writeDouble((*_iter24));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bools", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->bools.size()));
    std::vector<bool> ::const_iterator _iter25;
    for (_iter25 = this->bools.begin(); _iter25 != this->bools.end(); ++_iter25)
    {
      xfer += oprot->writeBool((*_iter25));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LargeMessage &a, LargeMessage &b) {
  using ::std::swap;
  swap(a.string1, b.string1);
  swap(a.size, b.size);
  swap(a.ints, b.ints);
  swap(a.doubles, b.doubles);
  swap(a.bools, b.bools);
  swap(a.__isset, b.__isset);
}

LargeMessage::LargeMessage(const LargeMessage& other26) {
  string1 = other26.string1;
  size = other26.size;
  ints = other26.ints;
  doubles = other26.doubles;
  bools = other26.bools;
  __isset = other26.__isset;
}
LargeMessage& LargeMessage::operator=(const LargeMessage& other27) {
  string1 = other27.string1;
  size = other27.size;
  ints = other27.ints;
  doubles = other27.doubles;
  bools = other27.bools;
  __isset = other27.__isset;
  return *this;
}
void LargeMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LargeMessage(";
  out << "string1=" << to_string(string1);
  out << ", " << "size=" << to_string(size);
  out << ", " << "ints=" << to_string(ints);
  out << ", " << "doubles=" << to_string(doubles);
  out << ", " << "bools=" << to_string(bools);
  out << ")";
}


Lists::~Lists() noexcept {
}


void Lists::__set_numbers(const std::vector<LargeMessage> & val) {
  this->numbers = val;
}
std::ostream& operator<<(std::ostream& out, const Lists& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Lists::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->numbers.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->numbers.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += this->numbers[_i32].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.numbers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Lists::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Lists");

  xfer += oprot->writeFieldBegin("numbers", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->numbers.size()));
    std::vector<LargeMessage> ::const_iterator _iter33;
    for (_iter33 = this->numbers.begin(); _iter33 != this->numbers.end(); ++_iter33)
    {
      xfer += (*_iter33).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Lists &a, Lists &b) {
  using ::std::swap;
  swap(a.numbers, b.numbers);
  swap(a.__isset, b.__isset);
}

Lists::Lists(const Lists& other34) {
  numbers = other34.numbers;
  __isset = other34.__isset;
}
Lists& Lists::operator=(const Lists& other35) {
  numbers = other35.numbers;
  __isset = other35.__isset;
  return *this;
}
void Lists::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Lists(";
  out << "numbers=" << to_string(numbers);
  out << ")";
}


